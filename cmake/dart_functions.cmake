# Copyright (c) 2011-2021, The DART development contributors

# ===============================================================================
function(dart_clang_format_setup)
  cmake_parse_arguments(
    CF_ARG # prefix
    "" # no boolean args
    "VERSION" # clang-format version
    "" # no multi-value args
    ${ARGN}
  )
  if(NOT CF_ARG_VERSION)
    set(CF_NAME clang-format)
  else()
    set(CF_NAME clang-format-${CF_ARG_VERSION})
  endif()
  find_program(CLANG_FORMAT_EXECUTABLE NAMES ${CF_NAME})

  if(NOT CLANG_FORMAT_EXECUTABLE)
    message(STATUS "Looking for clang-format - NOT found, please install "
                   "${CF_NAME} to enable automatic code formatting."
    )
    return()
  endif()

  message(STATUS "Found ${CF_NAME}.")
endfunction()

# ===============================================================================
function(_property_add property_name)
  get_property(is_defined GLOBAL PROPERTY ${property_name} DEFINED)
  if(NOT is_defined)
    define_property(
      GLOBAL PROPERTY ${property_name} BRIEF_DOCS "${property_name}"
      FULL_DOCS "Global properties for ${property_name}"
    )
  endif()
  foreach(item ${ARGN})
    set_property(GLOBAL APPEND PROPERTY ${property_name} "${item}")
  endforeach()
endfunction()

# ===============================================================================
function(dart_clang_format_add_sources)
  foreach(source ${ARGN})
    if(IS_ABSOLUTE "${source}")
      set(source_abs "${source}")
    else()
      get_filename_component(
        source_abs "${CMAKE_CURRENT_LIST_DIR}/${source}" ABSOLUTE
      )
    endif()
    if(EXISTS "${source_abs}")
      _property_add(CLANG_FORMAT_FORMAT_FILES "${source_abs}")
    else()
      message(
        FATAL_ERROR
          "Source file '${source}' does not exist at absolute path"
          " '${source_abs}'. This should never happen. Did you recently delete"
          " this file or modify 'CMAKE_CURRENT_LIST_DIR'"
      )
    endif()
  endforeach()
endfunction()

# ===============================================================================
function(dart_clang_format_add_targets)
  get_property(formatting_files GLOBAL PROPERTY CLANG_FORMAT_FORMAT_FILES)
  list(LENGTH formatting_files formatting_files_length)

  if(formatting_files AND CLANG_FORMAT_EXECUTABLE)
    message(STATUS "Formatting on ${formatting_files_length} source files.")

    add_custom_target(
      clang-format
      COMMAND ${CMAKE_COMMAND} -E echo
              "Formatting ${formatting_files_length} files..."
      COMMAND ${CLANG_FORMAT_EXECUTABLE} -style=file -i ${formatting_files}
      COMMAND ${CMAKE_COMMAND} -E echo "Done."
      DEPENDS ${CLANG_FORMAT_EXECUTABLE}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
    add_custom_target(
      clang-format-check
      COMMAND ${CMAKE_COMMAND} -E echo
              "Checking ${formatting_files_length} files..."
      COMMAND ${CMAKE_SOURCE_DIR}/scripts/check_format.sh
              ${CLANG_FORMAT_EXECUTABLE} ${formatting_files}
      COMMAND ${CMAKE_COMMAND} -E echo "Done."
      DEPENDS ${CLANG_FORMAT_EXECUTABLE}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )
  else()
    add_custom_target(
      format COMMAND ${CMAKE_COMMAND} -E echo "No file to format code style."
    )
    add_custom_target(
      check-format COMMAND ${CMAKE_COMMAND} -E echo
                           "No file to check code style."
    )
  endif()
endfunction()

# ==============================================================================
# cmake-format: off
# dart_build_tests(
#   TYPE <test_type>
#   SOURCES <sources>
#   [INCLUDE_DIRS <include_dependencies>]
#   [LINK_LIBRARIES <library_dependencies>]
#   [LINK_DART_LIBRARIES <library_dependencies>]
#   [TEST_LIST <output_var>]
# )
#
# Build multiple tests. Arguments are as follows:
#
# - TYPE           : Required. Preferably UNIT or INTEGRATION.
#
# - TARGET_PREFIX  : Optional. Prefix of the target name.
#
# - SOURCES        : Required. The list of source files for your tests. Each file
#                    will turn into a test.
#
# - INCLUDE_DIRS   : Optional. Additional include directories that should be
#                    visible to all the tests.
#
# - LINK_LIBRARIES : Optional. Additional library dependencies that every test
#                    should link to including the library built by this project.
#                    'gtest' and 'gtest_main' will be automatically linked.
#
# - LINK_DART_LIBRARIES:
#                    Optional. DART library dependencies.
#
# - COMPILE_DEFINITIONS:
#
# - TEST_LIST      : Optional. Provide a variable which will be given the list of the
#                    target names of the tests generated by this function.
# cmake-format: on
function(dart_build_tests)
  set(prefix dart_build_tests)
  set(options)
  set(oneValueArgs TYPE TARGET_PREFIX TEST_LIST)
  set(multiValueArgs SOURCES INCLUDE_DIRS LINK_LIBRARIES LINK_DART_LIBRARIES
                     COMPILE_DEFINITIONS
  )
  cmake_parse_arguments(
    "${prefix}" "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN}
  )

  if(NOT dart_build_tests_TYPE)
    message(
      FATAL_ERROR "DEVELOPER ERROR: You must specify a TYPE for your tests!"
    )
  endif()

  set(test_type ${dart_build_tests_TYPE})

  if(NOT BUILD_TESTING)
    message(STATUS "Testing is disabled -- skipping ${test_type} tests")
    return()
  endif()

  if(NOT DEFINED dart_build_tests_SOURCES)
    message(STATUS "No tests have been specified for ${test_type}")
  else()
    list(LENGTH dart_build_tests_SOURCES num_tests)
    message(STATUS "Adding ${num_tests} ${test_type} tests")
  endif()

  if(dart_build_tests_TEST_LIST)
    set(${dart_build_tests_TEST_LIST} "")
  endif()

  foreach(source ${dart_build_tests_SOURCES})

    # Set target name: <TYPE>[_<TARGET_PREFIX>]_<source>
    set(target_name ${test_type})
    if(dart_build_tests_TARGET_PREFIX)
      set(target_name "${target_name}_${dart_build_tests_TARGET_PREFIX}")
    endif()
    get_filename_component(source_name ${source} NAME_WE)
    string(REPLACE "test_" "" source_name ${source_name})
    get_filename_component(source_dir ${source} DIRECTORY)
    if(source_dir)
      string(REPLACE "/" "_" source_prefix ${source_dir})
      set(target_name "${target_name}_${source_prefix}_${source_name}")
    else()
      set(target_name "${target_name}_${source_name}")
    endif()

    add_executable(${target_name} ${source})
    add_test(NAME ${target_name} COMMAND $<TARGET_FILE:${target_name}>)
    target_include_directories(
      ${target_name} PRIVATE ${dart_build_tests_INCLUDE_DIRS}
    )

    target_link_libraries(${target_name} PRIVATE gtest gmock gtest_main)

    if(UNIX)
      # gtest requies pthread when compiled on a Unix machine
      target_link_libraries(${target_name} PRIVATE pthread)
    endif()

    target_link_libraries(
      ${target_name} PRIVATE ${dart_build_tests_LINK_LIBRARIES}
    )

    if(dart_build_tests_COMPILE_DEFINITIONS)
      target_compile_definitions(
        ${target_name} PRIVATE ${dart_build_tests_COMPILE_DEFINITIONS}
      )
    endif()

    foreach(dart_lib ${dart_build_tests_LINK_DART_LIBRARIES})
      if(NOT TARGET ${dart_lib})
        message(FATAL_ERROR "Invalid target: ${dart_lib}")
      endif()
      target_link_libraries(${target_name} PRIVATE ${dart_lib})
    endforeach()

    if(dart_build_tests_TEST_LIST)
      list(APPEND ${dart_build_tests_TEST_LIST} ${target_name})
    endif()

  endforeach()

  if(dart_build_tests_TEST_LIST)
    set(${dart_build_tests_TEST_LIST} "${${dart_build_tests_TEST_LIST}}"
        PARENT_SCOPE
    )
  endif()

  dart_clang_format_add_sources(${dart_build_tests_SOURCES})

endfunction()
